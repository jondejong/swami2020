/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package swami2020

import org.http4k.client.OkHttp
import org.http4k.core.*
import org.http4k.format.Jackson.auto
import org.junit.AfterClass
import org.junit.BeforeClass
import swami2020.api.request.CreateUser
import swami2020.api.response.Team
import swami2020.api.response.User
import swami2020.app.AppFactory
import swami2020.properties.DatabaseProperties
import swami2020.properties.ServerProperties
import swami2020.properties.SwamiProperties
import java.util.*
import kotlin.test.*

class AppTest {

    companion object {
        const val port = 9000
        lateinit var app: App

        // Application under test
        @BeforeClass
        @JvmStatic
        fun setup() {

            //TODO: Load properties from YAML
            val swamiProperties = SwamiProperties(
                    ServerProperties(port),
                    DatabaseProperties(
                            "jdbc:postgresql://localhost:5432/swami",
                            "swami_user",
                            "Password_1"
                    )
            )

            val appFactory = AppFactory(swamiProperties)
            app = App(appFactory)
            app.start()
        }

        @AfterClass
        @JvmStatic
        fun teardown() {
            app.stop()
        }
    }

    private val client = OkHttp()

    private val server = "http://localhost"
    private val urlBase = "$server:$port"

    // Teams
    private val teamLens = Body.auto<Team>().toLens()
    private val teamListLens = Body.auto<Collection<Team>>().toLens()
    private val teamsPath = "teams"
    private val teamsUrl = "$urlBase/$teamsPath"

    private val expectedTeam = Team(
            UUID.fromString("9579145e-1946-4f42-9c47-42fefb4eb8e6"),
            "Iowa",
            "Hawkeyes",
            "Big Ten"
    )

    // Users
    private val userLens = Body.auto<User>().toLens()
    private val userListLens = Body.auto<Collection<User>>().toLens()
    private val createUserLens = Body.auto<CreateUser>().toLens()
    private val usersPath = "users"
    private val usersUrl = "$urlBase/$usersPath"

    private val expectedUser = User(
            UUID.fromString("49c4db64-acd1-431f-b013-7f35895ec85b"),
            "Test",
            "User",
            "test.user@testemail.com"
    )

    // Health
    @Test
    fun testHealth() {
        val resp = client(Request(Method.GET, "$urlBase/hello/jonny"))
        assertNotNull(resp)
        assertEquals(Status.OK, resp.status)
        assertEquals("Hello, jonny!", resp.bodyString())
    }

    // Teams
    @Test
    fun testTeamList() {
        val resp = client(Request(Method.GET, teamsUrl))
        assertNotNull(resp)
        assertEquals(Status.OK, resp.status)

        val teams = teamListLens(resp)

        assertEquals(50, teams.size)
        teams.forEach { team ->
            assertNotNull(team.id)
            assertNotNull(team.name)
            assertNotNull(team.nickName)
            assertNotNull(team.conference)
        }
    }

    @Test
    fun testTeamFetch() {
        val resp = client(Request(Method.GET, "$teamsUrl/${expectedTeam.id.toString()}"))
        assertEquals(Status.OK, resp.status)

        val actualTeam = teamLens(resp)
        assertEquals(expectedTeam, actualTeam)
    }

    @Test
    fun testTeamNotFound() {
        val resp = client(Request(Method.GET, "$teamsUrl/${UUID.randomUUID()}"))
        assertEquals(Status.NOT_FOUND, resp.status)
    }

    @Test
    fun testInvalidTeamIdentifier() {
        val resp = client(Request(Method.GET, "$teamsUrl/notUUID"))
        assertEquals(Status.BAD_REQUEST, resp.status)
    }

    // Users
    @Test
    fun testUserUpdates() {
        val firstListResponse = client(Request(Method.GET, usersUrl))
        assertEquals(Status.OK, firstListResponse.status)

        val users = userListLens(firstListResponse)

        assertEquals(2, users.size)
        users.forEach { user ->
            assertNotNull(user.email)
            assertNotNull(user.firstName)
            assertNotNull(user.lastName)
            assertNotNull(user.id)
        }

        val createUser = CreateUser(
                "Jonny",
                "Tester",
                "jonny.tester@testemail.com",
                "pAssword-22"
        )

        val createResponse = client(
                createUserLens(
                        createUser,
                        Request(Method.POST, usersUrl)
                )
        )

        assertEquals(Status.OK, createResponse.status)

        val newUser = userLens(createResponse)
        assertNotNull(newUser.id)
        assertEquals("Jonny", newUser.firstName)
        assertEquals("Tester", newUser.lastName)
        assertEquals("jonny.tester@testemail.com", newUser.email)

        val postCreateListResponse = client(Request(Method.GET, usersUrl))
        assertEquals(Status.OK, postCreateListResponse.status)
        val postCreateUsers = userListLens(postCreateListResponse)

        assertEquals(3, postCreateUsers.size)
        var found = false
        postCreateUsers.forEach { user ->
            assertNotNull(user.email)
            assertNotNull(user.firstName)
            assertNotNull(user.lastName)
            assertNotNull(user.id)

            if (
                    user.firstName == "Jonny" &&
                    user.lastName == "Tester" &&
                    user.email == "jonny.tester@testemail.com"
            ) {
                found = true
            }
        }

        assertTrue(found, "Newly created user not found")

        val deleteResponse = client(Request(Method.DELETE, "$usersUrl/${newUser.id}"))
        assertEquals(Status.OK, deleteResponse.status)

        val finalListResponse = client(Request(Method.GET, usersUrl))
        assertEquals(Status.OK, finalListResponse.status)

        val finalUsers = userListLens(finalListResponse)
        assertEquals(2, finalUsers.size)

        users.forEach {
            assertNotEquals(it.id, newUser.id)
        }

    }

    @Test
    fun testUsersFetch() {
        val resp = client(Request(Method.GET, "$usersUrl/${expectedUser.id}"))
        assertEquals(Status.OK, resp.status)

        val actualUser = userLens(resp)
        assertEquals(expectedUser, actualUser)
    }

    @Test
    fun testUserNotFound() {
        val resp = client(Request(Method.GET, "$usersUrl/${UUID.randomUUID()}"))
        assertEquals(Status.NOT_FOUND, resp.status)
    }

    @Test
    fun testInvalidUserIdentifier() {
        val resp = client(Request(Method.GET, "$usersUrl/notUUID"))
        assertEquals(Status.BAD_REQUEST, resp.status)
    }

    // Errors
    @Test
    fun testBadURLNotFound() {
        val resp = client(Request(Method.GET, "$urlBase/things"))
        assertEquals(Status.NOT_FOUND, resp.status)
    }
}
