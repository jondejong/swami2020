/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package swami2020

import org.http4k.client.OkHttp
import org.http4k.core.Body
import org.http4k.core.Method
import org.http4k.core.Request
import org.http4k.core.Status
import org.http4k.format.Jackson.auto
import org.junit.AfterClass
import org.junit.BeforeClass
import swami2020.properties.DatabaseProperties
import swami2020.properties.ServerProperties
import swami2020.properties.SwamiProperties
import swami2020.response.Team
import java.util.*
import kotlin.test.*

class AppTest {

    companion object {
        const val port = 9000
        lateinit var app: App

        // Application under test
        @BeforeClass @JvmStatic fun setup() {

            //TODO: Load properties from YAML
            val swamiProperties = SwamiProperties(
                    ServerProperties(port),
                    DatabaseProperties(
                            "jdbc:postgresql://localhost:5432/swami",
                            "swami_user",
                            "Password_1"
                    )
            )

            val appFactory = AppFactory(swamiProperties)
            app = App(appFactory)
            app.start()
        }

        @AfterClass @JvmStatic fun teardown() {
            app.stop()
        }
    }

    private val client = OkHttp()

    private val teamLens = Body.auto<Team>().toLens()
    private val teamListLens = Body.auto<Collection<Team>>().toLens()

    private val server = "http://localhost"
    private val teamsPath = "teams"
    private val urlBase = "$server:$port"
    private val teamsUrl = "$urlBase/$teamsPath"

    private val testTeam = Team(
            UUID.fromString("9579145e-1946-4f42-9c47-42fefb4eb8e6"),
            "Iowa",
            "Hawkeyes",
            "Big Ten"
    )

    @Test fun testHealth() {
        val resp = client(Request(Method.GET, "$urlBase/hello/jonny"))
        assertNotNull(resp)
        assertEquals(Status.OK, resp.status)
        assertEquals("Hello, jonny!", resp.bodyString())
    }

    @Test fun testTeamList() {
        val resp = client(Request(Method.GET, teamsUrl))
        assertNotNull(resp)
        assertEquals(Status.OK, resp.status)

        val teams = teamListLens(resp)

        assertEquals(50, teams.size)
        teams.forEach { team ->
            assertNotNull(team.id)
            assertNotNull(team.name)
            assertNotNull(team.nickName)
            assertNotNull(team.conference)
        }
    }

    @Test fun testTeamFetch() {
        val resp = client(Request(Method.GET, "$teamsUrl/${testTeam.id.toString()}"))
        assertNotNull(resp)
        assertEquals(Status.OK, resp.status)

        val team = teamLens(resp)
        assertEquals(testTeam, team)
    }

    @Test fun testTeamNotFound() {
        val resp = client(Request(Method.GET, "$teamsUrl/${UUID.randomUUID()}"))
        assertEquals(Status.NOT_FOUND, resp.status)
    }

    @Test fun testInvalidTeamIdentifier() {
        val resp = client(Request(Method.GET, "$teamsUrl/notUUID"))
        assertEquals(Status.BAD_REQUEST, resp.status)
    }

    @Test fun testBadURLNotFound() {
        val resp = client(Request(Method.GET, "$urlBase/things"))
        assertEquals(Status.NOT_FOUND, resp.status)
    }
}
